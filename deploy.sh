#!/bin/bash

# Deployment script for Quant Dashboard
set -e

command_exists() { command -v "$1" >/dev/null 2>&1; }

info() { echo -e "\033[0;34m$1\033[0m"; }
success() { echo -e "\033[0;32m$1\033[0m"; }
warn() { echo -e "\033[1;33m$1\033[0m"; }
error() { echo -e "\033[0;31m$1\033[0m"; }

usage() {
  cat <<EOF
Usage: $0 [deploy|redeploy|watch] [options]

Commands:
  deploy                ÂàùÊ¨°ÈÉ®ÁΩ≤ÔºàÈªòËÆ§Ôºâ„ÄÇ‰ºöÊèêÁ§∫ËæìÂÖ•ÁÆ°ÁêÜÂëò‰ø°ÊÅØÂπ∂‰øùÂ≠òÂà∞ .env
  redeploy              ‰øÆÊîπÂêéÈáçÊñ∞ÈÉ®ÁΩ≤„ÄÇËØªÂèñ .env ÊàñÁéØÂ¢ÉÂèòÈáèÔºå‰∏ç‰ºöÂº∫Âà∂‰∫§‰∫íËæìÂÖ•
  watch                 ÁõëËßÜ Git ËøúÁ®ãÂàÜÊîØÂèòÊõ¥ÔºåËá™Âä® git pull Âπ∂ÊâßË°å redeployÔºàÈúÄË¶Å gitÔºâ

Options:
  --no-cache            ÊûÑÂª∫Êó∂‰∏ç‰ΩøÁî®ÁºìÂ≠òÔºàÁ≠âÊïà‰∫éÁéØÂ¢ÉÂèòÈáè NO_CACHE=1Ôºâ
  -y, --non-interactive Èùû‰∫§‰∫íÊ®°ÂºèÔºõËã•Áº∫Â∞ëÂøÖË¶ÅÁéØÂ¢ÉÂèòÈáè‰ºöÁõ¥Êé•Êä•ÈîôÈÄÄÂá∫
  -h, --help            ÊòæÁ§∫Â∏ÆÂä©

ÁéØÂ¢ÉÂèòÈáèÔºö
  ADMIN_USERNAME        ÁÆ°ÁêÜÂëòÁî®Êà∑Âêç
  ADMIN_EMAIL           ÁÆ°ÁêÜÂëòÈÇÆÁÆ±
  NO_CACHE=1            ÊûÑÂª∫Êó∂‰∏ç‰ΩøÁî®ÁºìÂ≠ò
EOF
}

# Load env from .env if present
load_env_file() {
  if [ -f .env ]; then
    # shellcheck disable=SC2046
    export $(grep -v '^#' .env | sed -e 's/\r$//' | xargs -0 echo 2>/dev/null || true)
  fi
}

write_env_var() {
  key="$1"; value="$2"
  if [ -z "$key" ]; then return; fi
  if [ -f .env ]; then
    if grep -q "^${key}=" .env; then
      sed -i.bak "s|^${key}=.*|${key}=${value}|" .env
    else
      echo "${key}=${value}" >> .env
    fi
  else
    echo "${key}=${value}" > .env
  fi
}

ensure_user_info() {
  local require_prompt="$1" # 'yes' or 'no'

  if [ -z "$ADMIN_USERNAME" ] || [ -z "$ADMIN_EMAIL" ]; then
    if [ "$require_prompt" = "yes" ] && [ "$NON_INTERACTIVE" != "1" ]; then
      info "üë§ Setting up user information..."
      if [ -z "$ADMIN_USERNAME" ]; then
        read -p "ËØ∑ËæìÂÖ•Áî®Êà∑Âêç (Username): " ADMIN_USERNAME
      fi
      if [ -z "$ADMIN_EMAIL" ]; then
        read -p "ËØ∑ËæìÂÖ•ÈÇÆÁÆ± (Email): " ADMIN_EMAIL
      fi
    else
      if [ -z "$ADMIN_USERNAME" ] || [ -z "$ADMIN_EMAIL" ]; then
        error "‚ùå Áº∫Â∞ëÁÆ°ÁêÜÂëò‰ø°ÊÅØ: ADMIN_USERNAME/ADMIN_EMAIL Êú™ËÆæÁΩÆ„ÄÇÂèØÂú® .env ‰∏≠ËÆæÁΩÆÊàñ‰ª•ÁéØÂ¢ÉÂèòÈáè‰º†ÂÖ•ÔºåÊàñÁßªÈô§ --non-interactive ‰ª•‰∫§‰∫íËæìÂÖ•„ÄÇ"
        exit 1
      fi
    fi
  fi

  # Validate email format (basic validation)
  case "$ADMIN_EMAIL" in
    *[@]*.*) : ;;  # looks ok
    *) error "‚ùå ÈÇÆÁÆ±Ê†ºÂºèÊó†ÊïàÔºåËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÈÇÆÁÆ±Âú∞ÂùÄ"; exit 1;;
  esac

  export ADMIN_USERNAME
  export ADMIN_EMAIL

  success "‚úÖ Áî®Êà∑‰ø°ÊÅØËÆæÁΩÆÂÆåÊàê:"; echo "  - Áî®Êà∑Âêç: $ADMIN_USERNAME"; echo "  - ÈÇÆÁÆ±: $ADMIN_EMAIL"; echo ""
}

local_validation_when_no_docker() {
  warn "‚ö†Ô∏è  Êú™Ê£ÄÊµãÂà∞ Docker Êàñ docker-composeÔºåËøõÂÖ•Êú¨Âú∞ÊµãËØïÊ®°ÂºèÔºà‰∏çÂêØÂä®ÂÆπÂô®Ôºâ..."

  # Validate backend/static and routing definitions
  if [ -f "backend/static/index.html" ]; then
    success "‚úÖ Ê£ÄÊµãÂà∞ backend/static/index.html"
  else
    error "‚ùå Êú™ÊâæÂà∞ backend/static/index.htmlÔºåËØ∑ÂÖàÊûÑÂª∫ÂâçÁ´ØÂπ∂ÂêåÊ≠•Âà∞ backend/static"
    echo "   ÊèêÁ§∫: cd frontend && npm ci && npm run build && cp -r dist/* ../backend/static/"
    exit 1
  fi

  # Check root route is explicitly defined
  if grep -q "@app.get(\"/\"" backend/main.py; then
    success "‚úÖ ÂêéÁ´ØÂ∑≤ÊòæÂºèÂÆö‰πâÊ†πË∑ØÁî± / ËøîÂõû index.html"
  else
    error "‚ùå Êú™Ê£ÄÊµãÂà∞Ê†πË∑ØÁî± / ÂÆö‰πâÔºåËØ∑Ê£ÄÊü• backend/main.py"
    exit 1
  fi

  # Check static mounts
  [ -d "backend/static/assets" ] && success "‚úÖ Ê£ÄÊµãÂà∞ÈùôÊÄÅËµÑÊ∫êÁõÆÂΩï backend/static/assets" || warn "‚ö†Ô∏è  Êú™Ê£ÄÊµãÂà∞ backend/static/assets"
  [ -d "backend/static/icons" ] && success "‚úÖ Ê£ÄÊµãÂà∞ÂõæÊ†áÁõÆÂΩï backend/static/icons" || warn "‚ö†Ô∏è  Êú™Ê£ÄÊµãÂà∞ backend/static/icons"
  [ -f "backend/static/manifest.json" ] && success "‚úÖ Ê£ÄÊµãÂà∞ PWA Êñá‰ª∂ manifest.json" || warn "‚ö†Ô∏è  Êú™Ê£ÄÊµãÂà∞ manifest.json"
  [ -f "backend/static/sw.js" ] && success "‚úÖ Ê£ÄÊµãÂà∞ PWA Êñá‰ª∂ sw.js" || warn "‚ö†Ô∏è  Êú™Ê£ÄÊµãÂà∞ sw.js"

  success "üéâ Êú¨Âú∞Ë∑ØÁî±Ê£ÄÊü•ÈÄöËøáÔºöÊ†πË∑ØÂæÑÂ∞ÜËøîÂõûÂâçÁ´Ø index.html"
  echo ""; info "üëâ ‰Ω†ÂèØ‰ª•Âú®ÂÆâË£Ö Docker ÂêéÂÜçÊ¨°ËøêË°åÊú¨ËÑöÊú¨ËøõË°åÂÆåÊï¥ÈÉ®ÁΩ≤"
}

create_traefik_network() {
  info "üåê Creating Traefik network..."
  docker network create traefik 2>/dev/null || echo "Network 'traefik' already exists"
}

build_and_start() {
  info "üî® Building and starting services..."
  docker-compose down --remove-orphans
  if [ "$NO_CACHE" = "1" ]; then
    docker-compose build --no-cache
  else
    docker-compose build
  fi
  docker-compose up -d

  info "‚è≥ Waiting for services to start..."; sleep 12

  success "‚úÖ Checking service status..."; docker-compose ps

  if command_exists curl; then
    info "üîç Verifying root path returns index.html..."
    if curl -sSf "http://localhost:61125/" | grep -qi "<div id=\"root\">"; then
      success "‚úÖ Root path served frontend index.html"
    else
      warn "‚ö†Ô∏è  Root path content did not match expected HTML"
    fi
  fi

  success "üéâ Deployment completed!"
  echo ""; info "üìä Application:"; echo "  - Local URL: http://localhost:61125"; echo "  - Local API Docs: http://localhost:61125/docs"; echo "  - Production URL: https://a.subx.fun"; echo "";
  info "üìÅ Data persistence:"; echo "  - Database: ./data/stock_data.db"; echo "";
  info "üîß Useful commands:"; echo "  - View logs: docker-compose logs -f"; echo "  - Stop services: docker-compose down"; echo "  - Restart: docker-compose restart"
}

run_deploy() {
  info "üöÄ Starting deployment of Quant Dashboard..."
  mkdir -p data

  if ! command_exists docker || ! command_exists docker-compose; then
    local_validation_when_no_docker
    return 0
  fi

  create_traefik_network
  build_and_start
}

run_redeploy() {
  info "üîÅ Redeploying Quant Dashboard (rebuild + restart)..."
  mkdir -p data

  if ! command_exists docker || ! command_exists docker-compose; then
    warn "‚ö†Ô∏è  Êú™Ê£ÄÊµãÂà∞ Docker Êàñ docker-composeÔºåÊó†Ê≥ïÈáçÊñ∞ÈÉ®ÁΩ≤„ÄÇ"
    exit 1
  fi

  create_traefik_network
  build_and_start
}

run_watch() {
  if ! command_exists git; then
    error "‚ùå watch Ê®°ÂºèÈúÄË¶Å gitÔºåÂèØÊîπÁî®Ôºö$0 redeploy"
    exit 1
  fi

  info "üëÄ Ê≠£Âú®ÁõëËßÜ Git ËøúÁ®ãÂàÜÊîØÂèòÊõ¥ÔºåÂèëÁé∞Êñ∞Êèê‰∫§Â∞ÜËá™Âä® git pull Âπ∂ÈáçÊñ∞ÈÉ®ÁΩ≤ÔºàÊØè 10s Ê£ÄÊü•‰∏ÄÊ¨°Ôºâ"

  # ÂàùÊ¨°ÊâßË°å‰∏ÄÊ¨° redeploy
  run_redeploy

  LAST_LOCAL=$(git rev-parse HEAD 2>/dev/null || echo "")
  while true; do
    sleep 10
    # Êõ¥Êñ∞ËøúÁ®ã‰ø°ÊÅØ
    git fetch --all --prune >/dev/null 2>&1 || true
    LOCAL=$(git rev-parse HEAD 2>/dev/null || echo "")
    UPSTREAM=$(git rev-parse @{u} 2>/dev/null || echo "$LOCAL")

    if [ -n "$UPSTREAM" ] && [ "$UPSTREAM" != "$LOCAL" ]; then
      info "üì• Ê£ÄÊµãÂà∞ËøúÁ®ãÂàÜÊîØÊúâÊõ¥Êñ∞ÔºåÊâßË°å git pull ..."
      git pull --ff-only || {
        warn "‚ö†Ô∏è  git pull Â§±Ë¥•ÔºåË∑≥ËøáÊ≠§Ê¨°Ëá™Âä®ÈáçÊñ∞ÈÉ®ÁΩ≤"
        continue
      }
      LAST_LOCAL=$(git rev-parse HEAD 2>/dev/null || echo "")
      run_redeploy
    elif [ "$LOCAL" != "$LAST_LOCAL" ]; then
      info "üìù Ê£ÄÊµãÂà∞Êú¨Âú∞Êèê‰∫§ÂèòÊõ¥ÔºåÊâßË°åÈáçÊñ∞ÈÉ®ÁΩ≤ ..."
      LAST_LOCAL="$LOCAL"
      run_redeploy
    fi
  done
}

# ---- Main ----
ACTION="deploy"
NON_INTERACTIVE=0

# Parse args
while [ $# -gt 0 ]; do
  case "$1" in
    deploy) ACTION="deploy"; shift;;
    redeploy|-r|--redeploy) ACTION="redeploy"; shift;;
    watch|-w|--watch) ACTION="watch"; shift;;
    --no-cache) NO_CACHE=1; shift;;
    -y|--non-interactive) NON_INTERACTIVE=1; shift;;
    -h|--help) usage; exit 0;;
    *) warn "Êú™Áü•ÂèÇÊï∞: $1"; shift;;
  esac
done

# Load .env values (if any) before prompting
load_env_file

case "$ACTION" in
  deploy)
    # For first-time deploy, allow interactive prompt and persist to .env
    ensure_user_info yes
    write_env_var ADMIN_USERNAME "$ADMIN_USERNAME"
    write_env_var ADMIN_EMAIL "$ADMIN_EMAIL"
    run_deploy
    ;;
  redeploy)
    # For redeploy, try to be non-interactive if env is available
    if [ "$NON_INTERACTIVE" = "1" ]; then
      ensure_user_info no
    else
      # If missing, still prompt interactively and persist
      ensure_user_info yes
      write_env_var ADMIN_USERNAME "$ADMIN_USERNAME"
      write_env_var ADMIN_EMAIL "$ADMIN_EMAIL"
    fi
    run_redeploy
    ;;
  watch)
    # In watch mode, ensure we have env; prompt if allowed
    if [ "$NON_INTERACTIVE" = "1" ]; then
      ensure_user_info no
    else
      ensure_user_info yes
      write_env_var ADMIN_USERNAME "$ADMIN_USERNAME"
      write_env_var ADMIN_EMAIL "$ADMIN_EMAIL"
    fi
    run_watch
    ;;
  *)
    usage; exit 1;;
fi
